/* Preamble
# Title: ARM Assembly Template
# Purpose: Implement a program recursively calculate a Fibonacci number.
# Author: Justin E
# Edit Date: 08APR2021
# JHU - COMP ORG - EN.605.204.8VL.SP21 Computer Organization
End Preamble */

.text
.global main
main:
    # push
    sub sp, sp, #4
    str lr, [sp]

    ldr r0, =inputprompt
    bl printf

    ldr r0, =input
    ldr r1, =num1
    bl scanf
    ldr r0, =num1
    ldr r0, [r0, #0]

    bl Summation
    mov r1, r0
    ldr r0, =output
    bl printf

    # pop
    ldr lr, [sp]
    add sp, sp, #4
    mov pc, lr

.data
    num1: .word 0
    inputprompt: .asciz "Please provide the Fibonacci sequence number you'd like: \n"
    output: .asciz "That Fibonacci number is %d\n"
    input: .asciz "%d"
#
# Recursive Summation
#
#    Summation(i) {
#        if (i == 0)
#            return 0;
#        else
#            return i + Summation(i-1)
#    }


.text
Summation:

    # push
    sub sp, sp, #12
    str lr, [sp, #0]
    str r4, [sp, #4]
    str r5, [sp, #8]

    mov r4, r0 // pass in Fibo input from main to r4, save

    # logic - if test
    

    cmp r0, #0 // if quotient is zero, we're done
    add r9, r9, r3
    bne Else
        mov r0, #0 // return value goes in r0
        b Return

    Else:
        // r0 should contain quotient from earlier division, return this to Summation
        bl Summation
        mov r0, r9
        b Return
    
    EndIf:
    
    Return:
    # pop
    ldr lr, [sp, #0]
    ldr r4, [sp, #4]
    ldr r5, [sp, #8]
    add sp, sp, #12
    mov pc, lr
    
# End Summation
